import numpy as np

"""def get_polynom(coords):
    n = len(coords)

    A = np.zeros((n, n))
    B = np.zeros(n)

    # x —Ç–∞ y –±–µ—Ä—É—Ç—å—Å—è –∑ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π, –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ 0 —ñ–Ω–¥–µ–∫—Å–∞ –¥–µ x = 3, y = 4 —ñ —Ç.–¥.
    for i, (x, y) in enumerate(coords):
        for j in range(n):
            A[i, j] = x ** j
        B[i] = y

    coefficients = np.linalg.solve(A, B)

    return coefficients
 
# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –æ—Å—ñ x –Ω–µ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤–∏–º–∏
coords = [(3, 4), (2, 7), (4, -12), (8, 9), (1, 14)]
coefficients = get_polynom(coords)
print(coefficients)"""

# –°—Ç–≤–æ—Ä–µ–Ω–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é ChatGPT
# np.polyfit –≤–∏–∫–æ–Ω—É—î –ø–æ–ª—ñ–Ω–æ–º–∞–ª—å–Ω—É –∞–ø—Ä–æ–∫—Å–∏–º–∞—Ü—ñ—é, —Ç–æ–±—Ç–æ –Ω–∞–π–∫—Ä–∞—â–µ –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è —É –≤–∏–ø–∞–¥–∫—É, —è–∫—â–æ —Ç–æ—á–∫–∏ –Ω–µ –ª–µ–∂–∞—Ç—å —Ç–æ—á–Ω–æ –Ω–∞ –æ–¥–Ω–æ–º—É –ø–æ–ª—ñ–Ω–æ–º—ñ.

"""def get_polynom(coords):
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ö —Ç–∞ —É
    x = np.array([point[0] for point in coords])
    y = np.array([point[1] for point in coords])

    # –°—Ç—É–ø—ñ–Ω—å –ø–æ–ª—ñ–Ω–æ–º–∞ = –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫ - 1
    degree = len(coords) - 1
    print(degree)
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –ø–æ–ª—ñ–Ω–æ–º–∞
    coeffs = np.polyfit(x, y, degree)

    # polyfit –ø–æ–≤–µ—Ä—Ç–∞—î –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ —É –ø–æ—Ä—è–¥–∫—É: [cn, ..., c1, c0]
    # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –ø–æ—Ä—è–¥–æ–∫ (–≤—ñ–¥ c0 –¥–æ cn), –º–æ–∂–Ω–∞:
    coeffs = coeffs[::-1]

    return coeffs

coords = [(1, 12), (3, 54), (-1, 2)]
coeffs = get_polynom(coords)
print( coeffs)"""

#–¶–µ–π –º–µ—Ç–æ–¥ –ø—Ä–∞—Ü—é—î –ª–∏—à–µ —Ç–æ–¥—ñ, –∫–æ–ª–∏ –º–∞—Ç—Ä–∏—Ü—è ùê¥ —î –æ–±–µ—Ä–Ω–µ–Ω–æ—é, —Ç–æ–±—Ç–æ –Ω–µ –º–∞—î –ª—ñ–Ω—ñ–π–Ω–æ –∑–∞–ª–µ–∂–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –æ–¥–Ω–∞–∫–æ–≤–∏—Ö ùë•-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç).
"""def get_polynom(coords):
    n = len(coords)
    
    A = np.zeros((n, n))
    B = np.zeros(n)

    for i, (x, y) in enumerate(coords):
        '''–ö–æ–∂–µ–Ω —Ä—è–¥–æ–∫ A: [x^0, x^1, ..., x^(n-1)]
        result = []
        for j in range(n):
        result.append(x ** j)
        –ö–æ—Ä–æ—Ç–∫–∞ –∑–∞–ø–∏—Å —Ü—å–æ–≥–æ —Ü–∏–∫–ª—É –ø—Ä–∏–≤–µ–¥–µ–Ω–æ –Ω–∏–∂—á–µ'''
        A[i] = [x ** j for j in range(n)]
        B[i] = y

    A_inv = np.linalg.inv(A)

    # –ú–∞—Ç—Ä–∏—á–Ω–µ –º–Ω–æ–∂–µ–Ω–Ω—è: C = A_inv * B
    C = A_inv @ B

    return C

coords = [(1, 12), (3, 54), (-1, 2)]
coeffs = get_polynom(coords)
print(coeffs)"""